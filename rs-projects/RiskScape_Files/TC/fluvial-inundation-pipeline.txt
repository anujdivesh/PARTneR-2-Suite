input($hazard_maps, name: 'event') as hazard_input
 ->
select({ { event.*, bookmark(id: $shared_lib + event.file, options: {}, type: 'coverage(floating)') as coverage } as event })
 ->
join_exposures_and_events.rhs

input($population, name: 'exposure') as input_population
->
select({ *, 'Population' as InputType })
->
union() as all_exposures

input($buildings, name: 'exposure') as input_buildings
->
select({ *, 'Building' as InputType })
->
all_exposures

input($evac_centres, name: 'exposure') as input_evac_centres
->
select({ *, 'Evacuation Centre' as InputType })
->
all_exposures

input($health_facilities, name: 'exposure') as input_health_facilities
->
select({ *, 'Health Facility' as InputType })
->
all_exposures

input($schools, name: 'exposure') as input_schools
->
select({ *, 'School' as InputType })
->
all_exposures

input($roads, name: 'exposure') as input_roads
 ->
select({ *,  'Road' as InputType })
 ->
all_exposures

input($crops, name: 'exposure') as input_crops
 ->
select({ *,  'Crop' as InputType })
 ->
all_exposures

input($airports, name: 'exposure') as input_airports
 ->
select({ *,  'Airport' as InputType, true as infrastructure })
 ->
all_exposures

input($ports, name: 'exposure') as input_ports
 ->
select({ *,  'Port' as InputType, true as infrastructure })
 ->
all_exposures

input($power, name: 'exposure') as input_power
 ->
select({ *,  'Power' as InputType, true as infrastructure })
 ->
all_exposures

input($telecommunications, name: 'exposure') as input_telecom
 ->
select({ *,  'Telecommunication' as InputType, true as infrastructure })
 ->
all_exposures

input($water, name: 'exposure') as input_water
 ->
select({ *,  'Water' as InputType, true as infrastructure })
 ->
all_exposures

input($bridges, name: 'exposure') as input_bridges
 ->
select({ *,  'Bridge' as InputType, true as infrastructure })
 ->
all_exposures

#
# Geoprocessing & Sampling
#
all_exposures
 ->
# lookup the metric CRS for each exposure and reproject to make measure/segment/sample operations quicker
# This is not so critical for this model, but should still improve performance a little
select({ *, sample_one(exposure.geom, to_coverage(bookmark($hazard_index)), buffer-distance: 5000.0) as hazard_index }) as sample_hazard_group
 ->
select({ *, reproject(exposure.geom, $reproject_to) as geom }) as reproject
 ->
select({ *, switch(InputType, default: false, cases: [{ in: $can_segment, return: true }]) as can_segment })
 ->
# segment any lines/polygons by a fixed distance (not by a grid).
# If any part of segment is exposed, then the whole segment is exposed.
select({ *, measure(geom) as orig_size, segment(geom, $cut_distance) as segmented_geom }) as segment
 ->
# NB: don't segment buildings or other discrete assets
select({ *, if_then_else(can_segment, segmented_geom, [ geom ]) as geom })
 ->
unnest(geom)
 ->
select({ *, measure(geom) as size }) as measure
 ->
# NB: use scale_factor=1.0 for points, so we don't end up with NaN
select({ *, if_then_else(can_segment and size > 0, size / orig_size, 1.0) as scale_factor })
 ->
select({
         *,
         merge(exposure, {
                           geom,
                           exposure.Value * scale_factor as Value,
                           InputType as Asset,
                           if_null(infrastructure, false) as Infrastructure,
                           round(size, 2) as Size
                         }) as exposure
       }) as scale_exposures
 ->
select({
          *,
          sample_one(exposure, to_coverage(bookmark($map_summary)), 10000) as map_region,
          sample_one(exposure, to_coverage(bookmark($table_summary)), 10000) as table_region,
       })
 ->
join(on: true) as join_exposures_and_events
 ->
select({ *, map(sample(geom, event.coverage), h -> h.sampled) as hazard_intensity })
->
select({ *, map(hazard_intensity, x -> if_then_else(str(x) = 'NaN', null_of('floating'), x)) as hazard_intensity })
 ->
# for simplicity (and conservativeness), just use the max hazard intensity that the element-at-risk was exposed to
select({ *, max(hazard_intensity) as hazard_intensity })
 ->
# each exposure is joined up to every flood map, so there will be duplicate exposures for
# the same ARI/duration. However, each exposure should only be exposed to a single flood map,
# so we filter out the duplicates here (i.e. the other islands that this exposure is not located on).
# A side-effect of this is that we can't report total asset values in this model easily.
filter(hazard_intensity > $min_flood_depth)
 ->
select({ *, Flood_Loss(exposure, hazard_intensity).Direct_Loss as loss }) as event_impact_table
 ->
# round values so the individual features look nicer in the results
# NB: we don't round prior to aggregation because things like Population are always floating
select({
         *,
         round(loss) as loss,
         round(hazard_intensity, 2) as hazard_intensity,
         merge(exposure, {
                           round(exposure.Value) as Value,
                           table_region.Region as Admin1_Region,
                           map_region.Region as Admin2_Region
                         }) as exposure
       }) as exposed_elements_at_risk

#
# Reporting
#
exposed_elements_at_risk
 ->
filter(exposure.Asset = 'Building')
 ->
group(by: { exposure.* },
      select: {
        *,
        min(event.Return_Period) as Min_ARI_Impacted_by,
        bucket(by: event,
               pick: b -> b.ARI = event.Return_Period and b.duration = event.Duration,
               select: {
                    max(hazard_intensity) as Flood_Depth,
                    max(loss) as Loss,
                  },
               buckets: $ARI_buckets) as Impact
      })
 ->
save('building-impacts', format: 'geojson')

exposed_elements_at_risk
 ->
filter(exposure.Asset = 'Road')
 ->
group(by: { exposure.* },
      select: {
        *,
        min(event.Return_Period) as Min_ARI_Impacted_by,
        bucket(by: event,
               pick: b -> b.ARI = event.Return_Period and b.duration = event.Duration,
               select: {
                    max(hazard_intensity) as Flood_Depth,
                    max(loss) as Loss,
                  },
               buckets: $ARI_buckets) as Impact
      })
 ->
save('road-impacts', format: 'geojson')

exposed_elements_at_risk
 ->
filter(exposure.Asset = 'Health Facility' or exposure.Asset = 'School' or exposure.Asset = 'Evacuation Centre')
 ->
group(by: { exposure.* },
      select: {
        *,
        min(event.Return_Period) as Min_ARI_Impacted_by,
        bucket(by: event,
               pick: b -> b.ARI = event.Return_Period and b.duration = event.Duration,
               select: {
                    max(hazard_intensity) as Flood_Depth,
                  },
               buckets: $ARI_buckets) as Impact
      })
 ->
save('exposure-by-cluster', format: 'geojson')

event_impact_table
 ->
# pick out the exposed values by exposure type now to simplify the aggregate steps a little
# Note that everything is exposed at this point
select({
         *,
         if_then_else(exposure.Infrastructure, 'Infrastructure', exposure.Asset) as Asset_Type,
         if_then_else(exposure.Asset = 'Building', loss, 0.0) as Building_Loss,
         if_then_else(exposure.Asset = 'Road', loss, 0.0) as Road_Loss,
         if_then_else(exposure.Infrastructure, loss, 0.0) as Infrastructure_Loss,
         if_then_else(exposure.Asset = 'Crop', loss, 0.0) as Crop_Loss,
         if_then_else(exposure.Asset = 'Building', exposure.Value, 0.0) as Exposed_Building_Value,
         if_then_else(exposure.Asset = 'Road', exposure.Value, 0.0) as Exposed_Road_Value,
         if_then_else(exposure.Infrastructure, exposure.Value, 0.0) as Exposed_Infrastructure_Value,
         if_then_else(exposure.Asset = 'Crop', exposure.Value, 0.0) as Exposed_Crop_Value,
         if_then_else(exposure.Asset = 'Population', exposure.Value, 0.0) as Exposed_Population,
         if_then_else(exposure.Asset != 'Population', exposure.Value, 0.0) as Exposed_Total_Value,
         if_then_else(exposure.Asset = 'Road', exposure.Size / 1000, 0.0) as Exposed_Road_km,

       }) as pre_aggregate_event_impact_table
 ->
group(by: { map_region },
      select: {
        map_region,
        bucket(by: event,
               pick: b -> b.ARI = event.Return_Period and b.duration = event.Duration,
               buckets: $ARI_buckets,
               select: {
                count(Asset_Type = 'Building') as Exposed_Buildings,
                count(Building_Loss > 0) as Damaged_Buildings,
                count(Asset_Type = 'Building' and exposure.UseType = 'Residential') as Exposed_Residential_Buildings,
                count(Asset_Type = 'Building' and exposure.UseType != 'Residential') as Exposed_Nonresidential_Buildings,
        
                round(if_null(sum(Building_Loss), 0.0)) as Building_Loss,
                round(if_null(sum(if_then_else(exposure.UseType = 'Residential', Building_Loss, 0.0)), 0.0)) as Residential_Building_Loss,
                round(if_null(sum(if_then_else(exposure.UseType != 'Residential', Building_Loss, 0.0)), 0.0)) as Nonresidential_Building_Loss,
        
                round(if_null(sum(Exposed_Building_Value), 0.0)) as Exposed_Building_Value,
        
                # Population
                round(if_null(sum(Exposed_Population), 0.0)) as Exposed_Population,
                count(Asset_Type = 'Population') as Exposed_Households,
        
                # Roads
                round(if_null(sum(Exposed_Road_km), 0.0), 2) as Exposed_Road_km,
                round(if_null(sum(Road_Loss), 0.0)) as Road_Loss,
                round(if_null(sum(Exposed_Road_Value), 0.0)) as Exposed_Road_Value,
        
                # infrastructure
                round(if_null(sum(Infrastructure_Loss), 0.0)) as Infrastructure_Loss,
                round(if_null(sum(Exposed_Infrastructure_Value), 0.0)) as Exposed_Infrastructure_Value,
                count(Asset_Type = 'Infrastructure') as Exposed_Infrastructure,
        
                # crops
                round(if_null(sum(Crop_Loss), 0.0)) as Crop_Loss,
                round(if_null(sum(Exposed_Crop_Value), 0.0)) as Total_Crop_Value,
        
                # exposed schools, health, etc
                count(Asset_Type = 'Evacuation Centre') as Exposed_Evacuation_Centres,
                count(Asset_Type = 'Health Exposedity') as Exposed_Health_Facilties,
                count(Asset_Type = 'School') as Exposed_Schools,
        
                round(if_null(sum(Exposed_Total_Value), 0.0)) as Total_Exposed_Value,
                round(if_null(sum(loss), 0.0)) as Total_Loss,
        
                bucket_range(pick: hazard_intensity,
                      range: $flood_depths,
                      select: {
                        count(InputType = 'Building') as Exposed_Buildings,
                        round(if_null(sum(Exposed_Population), 0.0)) as Exposed_Population,
                        round(if_null(sum(Exposed_Road_km), 0.0), 2) as Exposed_Road_km,
                        count(InputType = 'Evacuation Centre') as Exposed_Evacuation_Centres,
                        count(InputType = 'Health Facility') as Exposed_Health_Facilties,
                        count(InputType = 'School') as Exposed_Schools,
    
                        round(if_null(sum(Exposed_Building_Value), 0.0)) as Exposed_Building_Value,
                        round(if_null(sum(Exposed_Road_Value), 0.0)) as Exposed_Road_Value,
                        round(if_null(sum(Exposed_Crop_Value), 0.0)) as Exposed_Crop_Value,
                        round(if_null(sum(Exposed_Infrastructure_Value), 0.0)) as Exposed_Infrastructure_Value,
                        round(if_null(sum(Exposed_Total_Value), 0.0)) as Total_Exposed_Value,
        
                        round(if_null(sum(Building_Loss), 0.0)) as Building_Loss,
                        round(if_null(sum(Road_Loss), 0.0)) as Road_Loss,
                        round(if_null(sum(Crop_Loss), 0.0)) as Crop_Loss,
                        round(if_null(sum(Infrastructure_Loss), 0.0)) as Infrastructure_Loss,
                        round(if_null(sum(loss), 0.0)) as Total_Loss,
                }) as Depth
               }) as Impact
      }) as aggregate_impact
 ->
select({ map_region.*, Impact.* })
 ->
save('regional-impacts', format: 'geojson')

pre_aggregate_event_impact_table
 ->
group(by: { table_region.Region, event.Return_Period, event.Duration },
      select: {
        *,
        count(Asset_Type = 'Building') as Exposed_Buildings,
        count(Building_Loss > 0) as Damaged_Buildings,
        count(Asset_Type = 'Building' and exposure.UseType = 'Residential') as Exposed_Residential_Buildings,
        count(Asset_Type = 'Building' and exposure.UseType != 'Residential') as Exposed_Nonresidential_Buildings,

        round(if_null(sum(Building_Loss), 0.0)) as Building_Loss,
        round(if_null(sum(if_then_else(exposure.UseType = 'Residential', Building_Loss, 0.0)), 0.0)) as Residential_Building_Loss,
        round(if_null(sum(if_then_else(exposure.UseType != 'Residential', Building_Loss, 0.0)), 0.0)) as Nonresidential_Building_Loss,

        round(if_null(sum(Exposed_Building_Value), 0.0)) as Exposed_Building_Value,

        # Population
        round(if_null(sum(Exposed_Population), 0.0)) as Exposed_Population,
        count(Asset_Type = 'Population') as Exposed_Households,

        # Roads
        round(if_null(sum(Exposed_Road_km), 0.0), 2) as Exposed_Road_km,
        round(if_null(sum(Road_Loss), 0.0)) as Road_Loss,
        round(if_null(sum(Exposed_Road_Value), 0.0)) as Exposed_Road_Value,

        # infrastructure
        round(if_null(sum(Infrastructure_Loss), 0.0)) as Infrastructure_Loss,
        round(if_null(sum(Exposed_Infrastructure_Value), 0.0)) as Exposed_Infrastructure_Value,
        count(Asset_Type = 'Infrastructure') as Exposed_Infrastructure,

        # crops
        round(if_null(sum(Crop_Loss), 0.0)) as Crop_Loss,
        round(if_null(sum(Exposed_Crop_Value), 0.0)) as Total_Crop_Value,

        # exposed schools, health, etc
        count(Asset_Type = 'Evacuation Centre') as Exposed_Evacuation_Centres,
        count(Asset_Type = 'Health Exposedity') as Exposed_Health_Facilties,
        count(Asset_Type = 'School') as Exposed_Schools,

        round(if_null(sum(Exposed_Total_Value), 0.0)) as Total_Exposed_Value,
        round(if_null(sum(loss), 0.0)) as Total_Loss,

        bucket_range(pick: hazard_intensity,
              range: $flood_depths,
              select: {
                count(Asset_Type = 'Building') as Exposed_Buildings,
                round(if_null(sum(Exposed_Population), 0.0)) as Exposed_Population,
                count(Asset_Type = 'Evacuation Centre') as Exposed_Evacuation_Centres,
                count(Asset_Type = 'Health Facility') as Exposed_Health_Facilties,
                count(Asset_Type = 'School') as Exposed_Schools,
                round(if_null(sum(Exposed_Road_km), 0.0), 2) as Exposed_Road_km,

                round(if_null(sum(Exposed_Building_Value), 0.0)) as Exposed_Building_Value,
                round(if_null(sum(Exposed_Road_Value), 0.0)) as Exposed_Road_Value,
                round(if_null(sum(Exposed_Crop_Value), 0.0)) as Exposed_Crop_Value,
                round(if_null(sum(Exposed_Infrastructure_Value), 0.0)) as Exposed_Infrastructure_Value,
                round(if_null(sum(Exposed_Total_Value), 0.0)) as Total_Exposed_Value,

                round(if_null(sum(Building_Loss), 0.0)) as Building_Loss,
                round(if_null(sum(Road_Loss), 0.0)) as Road_Loss,
                round(if_null(sum(Crop_Loss), 0.0)) as Crop_Loss,
                round(if_null(sum(Infrastructure_Loss), 0.0)) as Infrastructure_Loss,
                round(if_null(sum(loss), 0.0)) as Total_Loss,
        }) as Depth
})
 ->
sort([ Region, Return_Period])
 ->
save('regional-summary', format: 'csv')

