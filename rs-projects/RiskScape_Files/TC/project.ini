[bookmark FMS-Track]
location = placeholder.csv
add-line-numbers = true
# NB: FMS data is in 0-360 longitude, so convert to -180 to 180 degrees
set-attribute.geom = create_point(float(Latitude), map(float(Longitude), lon -> if_then_else(lon <= 180.0, lon, lon - 360.0)))
set-attribute.RadiusMaxWinds = float(if_then_else(RadiusMaxWinds = 'NaN', '0.0', RadiusMaxWinds))
set-attribute.MeanWind = float(if_then_else(MeanWind = 'NaN', '0.0', MeanWind))
set-attribute.MinGaleRadius = min( \
                                  map([ NEGaleRadius, NWGaleRadius, SEGaleRadius, SWGaleRadius, GaleRadius ],\
                                      x -> float(if_then_else(x = 'NaN' or x = '', str(maxfloat()), x))) \
                                 )
set-attribute.MaxGaleRadius = max( \
                                  map([ NEGaleRadius, NWGaleRadius, SEGaleRadius, SWGaleRadius, GaleRadius ], \
                                      x -> float(if_then_else(x = 'NaN' or x = '', '0.0', x))) \
                                 )
set-attribute.MinStormRadius = min( \
                                  map([ NEStormRadius, NWStormRadius, SEStormRadius, SWStormRadius, StormRadius ], \
                                      x -> float(if_then_else(x = 'NaN' or x = '', str(maxfloat()), x))) \
                                 )
set-attribute.MaxStormRadius = max( \
                                  map([ NEStormRadius, NWStormRadius, SEStormRadius, SWStormRadius, StormRadius ], \
                                      x -> float(if_then_else(x = 'NaN' or x = '', '0.0', x))) \
                                 )
set-attribute.MinHurricaneRadius = min( \
                                  map([ NEHurricaneRadius, NWHurricaneRadius, SEHurricaneRadius, SWHurricaneRadius, HurricaneRadius ], \
                                      x -> float(if_then_else(x = 'NaN' or x = '', str(maxfloat()), x))) \
                                 )
set-attribute.MaxHurricaneRadius = max( \
                                  map([ NEHurricaneRadius, NWHurricaneRadius, SEHurricaneRadius, SWHurricaneRadius, HurricaneRadius ], \
                                  x -> float(if_then_else(x = 'NaN' or x = '', '0.0', x))) \
                                 )
set-attribute.Uncertainty = map(Uncertainty, x -> float(if_then_else(x = 'NaN' or x = '', '0.0', x)))
crs-name = EPSG:4326

[bookmark IBTrACS]
location = ibtracs.csv
add-line-numbers = true
set-attribute.geom = create_point(float(LAT), map(float(LON), lon -> if_then_else(lon <= 180.0, lon, lon - 360.0)))
set-attribute.RadiusMaxWinds = float(if_then_else(USA_RMW = '', '0.0', USA_RMW))
set-attribute.MeanWind = float(if_then_else(WMO_WIND = '', '0.0', WMO_WIND))
set-attribute.MinGaleRadius = min( \
                                  map([ USA_R34_NE, USA_R34_NW, USA_R34_SE, USA_R34_SW ],\
                                      x -> float(if_then_else(x = 'NaN' or x = '', str(maxfloat()), x))) \
                                 )
set-attribute.MaxGaleRadius = max( \
                                  map([ USA_R34_NE, USA_R34_NW, USA_R34_SE, USA_R34_SW ],\
                                      x -> float(if_then_else(x = 'NaN' or x = '', '0.0', x))) \
                                 )
set-attribute.MinStormRadius = min( \
                                  map([ USA_R50_NE, USA_R50_NW, USA_R50_SE, USA_R50_SW ],\
                                      x -> float(if_then_else(x = 'NaN' or x = '', str(maxfloat()), x))) \
                                 )
set-attribute.MaxStormRadius = max( \
                                  map([ USA_R50_NE, USA_R50_NW, USA_R50_SE, USA_R50_SW ],\
                                      x -> float(if_then_else(x = 'NaN' or x = '', '0.0', x))) \
                                 )
set-attribute.MinHurricaneRadius = min( \
                                  map([ USA_R64_NE, USA_R64_NW, USA_R64_SE, USA_R64_SW ],\
                                      x -> float(if_then_else(x = 'NaN' or x = '', str(maxfloat()), x))) \
                                 )
set-attribute.MaxHurricaneRadius = max( \
                                  map([ USA_R64_NE, USA_R64_NW, USA_R64_SE, USA_R64_SW ],\
                                      x -> float(if_then_else(x = 'NaN' or x = '', '0.0', x))) \
                                 )
set-attribute.Uncertainty = 0.0
crs-name = EPSG:4326

[function combine_polygons]
description = Combines a list of buffered wind swath to produce a single multi-polygon showing the wind extent
location = Functions/combine_polygons.py
argument-types = [ list(nullable(geometry)) ]
return-type = geometry

[function combine_points]
description = turns a list of points into a line-string
location = Functions/combine_points.py
# TODO: the Referenced[CRS] messes up the RiskScape function resolving (with a list of structs),
# so we strip off the CRS and pass it in as the 2nd args
argument-types = [ track_without_crs: list(struct(geom: point, line: integer)), geom_with_crs: geometry ]
return-type = geometry

[function max_windspeed]
description = finds the strongest windswath in the list
location = Functions/max_wind.py
argument-types = [ winds: list(struct(Danger: text, WindSpeed: floating)) ]
return-type = nullable(struct(Danger: text, WindSpeed: floating))

[type building_wind]
type.UseType = text
# we make these attributes nullable for convenience.
# The pipeline combines multiple layers into a common 'exposure' struct,
# but the attributes will only exist for buildings and be null for everything else.
type.Structure = nullable(text)
type.Wall_Material = nullable(text)
type.Condition = nullable(text)
type.Asset = text
type.Value = floating

[type infrastructure_wind]
type.UseType = text
type.Asset = text
type.Value = floating

[type wind_loss]
type.Exposure = integer
type.Loss_p16 = floating
type.Loss_p50 = floating
type.Loss_p84 = floating
type.Vulnerability_curve = text

[function wind_damage_infrastructure]
location = Functions/WindDamage_Loss_Infrastructure.py
framework = cpython
argument-types = [infrastructure_wind, hazard: floating]
return-type = wind_loss

[function wind_damage_buildings]
location = Functions/WindDamage_Loss_Buildings.py
framework = cpython
argument-types = [building_wind, hazard: floating]
return-type = wind_loss

[function wind_damage]
location = Functions/WindDamage_Loss.py
framework = cpython
argument-types = [building_wind, hazard: floating]
return-type = wind_loss

[parameter IBTrACS]
default = 'RiskScape_Files/TC/ibtracs.csv'
label = Hazard: Cyclone track (IBTrACS)
properties = bookmark-template: IBTrACS
choices = "N/A": 'RiskScape_Files/TC/ibtracs.csv'
description = The International Best Track Archive for Climate Stewardship (IBTrACS) cyclone tracks can be used for post-event model runs.

[parameter FMS_track]
default = 'RiskScape_Files/TC/placeholder.csv'
label = Hazard: Cyclone track (FMS)
choices = "N/A": 'RiskScape_Files/TC/placeholder.csv'
properties = bookmark-template: FMS-Track
description = The cyclone track is provided by Fiji Meteorological Service (FMS) or from the countryâ€™s Meteorological Service.\
    Note that the first few '#' lines must be removed from the CSV file first.
